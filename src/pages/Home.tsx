import React from "react";

import { useAppDispatch, useAppSelector } from "../redux/store";
import { selectProducts } from "../redux/product/selectors";
import { selectFilters } from "../redux/filters/selectors";
import { fetchProducts } from "../redux/product/asyncThunk";

import { Product } from "../redux/product/types";

import {
  ContactOfPromo,
  CarouselOfPromo,
  TimerOfPromo,
  Pagination,
  Sort,
  Loader,
  ProductBlock,
  Sidebar,
} from "../components";

const Home: React.FC = () => {
  const { products, status, total, limit } = useAppSelector(selectProducts);
  const totalPages = Math.ceil(total / limit);

  const dispatch = useAppDispatch();
  const {
    searchValue,
    inverterFilter,
    minPriceFilter,
    maxPriceFilter,
    areaFilter,
    brandFilter,
    countryFilter,
    sort,
    page,
  } = useAppSelector(selectFilters);

  const getProducts = async () => {
    const search = searchValue ? `&search=${searchValue}` : "";
    const inverter =
      inverterFilter.length > 0 ? `&inverter=${inverterFilter.toString()}` : "";
    const minPrice = minPriceFilter ? `&minPrice=${minPriceFilter}` : "";
    const maxPrice = maxPriceFilter ? `&maxPrice=${maxPriceFilter}` : "";
    const area = areaFilter.length > 0 ? `&area=${areaFilter.toString()}` : "";
    const brand =
      brandFilter.length > 0 ? `&brand=${brandFilter.toString()}` : "";
    const country = `&country=${countryFilter}`;
    const sortBy = sort.sortProperty.replace("-", "");
    const order = sort.sortProperty.includes("-") ? "-1" : "1";

    dispatch(
      fetchProducts({
        page,
        search,
        inverter,
        minPrice,
        maxPrice,
        area,
        brand,
        country,
        sortBy,
        order,
      })
    );
  };

  React.useEffect(() => {
    getProducts();
  }, [
    page,
    searchValue,
    inverterFilter,
    minPriceFilter,
    maxPriceFilter,
    areaFilter,
    brandFilter,
    countryFilter,
    sort.sortProperty,
  ]);

  return (
    <>
      <div className="promo">
        <div className="container">
          <div className="promo-blocks">
            <ContactOfPromo />
            <CarouselOfPromo />
            <TimerOfPromo />
          </div>
        </div>
      </div>
      <div className="container padding-bottom">
        {status === "loading" ? (
          <div className="page__title skeleton"></div>
        ) : (
          <div className="page__title">
            <h1 className="title">–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã (—Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º—ã)</h1>
            <span> {total} —Ç–æ–≤–∞—Ä–æ–≤</span>
          </div>
        )}
        <div className="vitrina">
          <Sidebar />
          <div className="right-bar">
            <Sort />
            <div className="products-container">
              {status === "error" ? (
                <div>
                  <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
                  <p>
                    –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ
                    –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
                  </p>
                </div>
              ) : status === "loading" ? (
                <Loader className={"product-block"} />
              ) : total === 0 ? (
                <div className="product-not-found">
                  <h2>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï</h2>
                  <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞.</p>
                </div>
              ) : (
                products.map((obj: Product) => (
                  <ProductBlock key={obj._id} {...obj} />
                ))
              )}
            </div>
            {totalPages > 1 && <Pagination />}
          </div>
        </div>
      </div>
    </>
  );
};

export default Home;
